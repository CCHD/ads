ElementType EvalPostfix(char *expr){
	char tmp[Max_Expr + 1];
	double opnd[Max_Expr + 1];
	int opnd_ptr = -1;
	int i, j = 0, flag = 0;
	
	for(i = 0; i < Max_Expr + 1; i++){
		if(' ' == expr[i]||'\0' == expr[i]){
			if(flag){
				opnd[++opnd_ptr] = atof(tmp);
				for(j = 0; j < 30; j++)
					tmp[j] = 0;
				j = 0;
				flag = 0;
			}
			if('\0' == expr[i])
				break;
		}
		else if(expr[i] >= '0'&&expr[i] <= '9'||expr[i] == '.'){
			tmp[j++] = expr[i];
			flag = 1;
		}  
		else if(expr[i] == '+'||expr[i] == '-'||expr[i] == '*'||expr[i] == '/'){
				if(expr[i + 1] != '\0'&&expr[i + 1] >= '0'&&expr[i + 1] <= '9'&&expr[i] == '-'){
					tmp[j++] = '-';
					continue;
				}
				opnd_ptr--;
				if(opnd_ptr < 0)
					return Infinity;
				switch(expr[i]){
					case'+':opnd[opnd_ptr] += opnd[opnd_ptr + 1];break;
					case'-':opnd[opnd_ptr] -= opnd[opnd_ptr + 1];break;
					case'*':opnd[opnd_ptr] *= opnd[opnd_ptr + 1];break;
					case'/':if(opnd[opnd_ptr + 1])
								opnd[opnd_ptr] /= opnd[opnd_ptr + 1];
							else
								return Infinity;
				}
		}
		else
			return Infinity;
	}
	if(opnd_ptr == 0)
		return opnd[0];
	return Infinity;
}